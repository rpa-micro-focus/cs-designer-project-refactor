########################################################################################################################
#!!
#! @description: Refactors
#!
#! @input action: RENAME_PROPERTY, MOVE_PROPERTY_FILE, MOVE_FLOW, MOVE_FLOWS
#!
#! @output failure: Error message in case of failure
#!!#
########################################################################################################################
namespace: io.cloudslang.microfocus.rpa.designer.project.refactor._operations
operation:
  name: refactor
  inputs:
    - action
    - project_folders
    - old_name
    - new_name
    - property_file_name:
        required: false
    - namespace:
        required: false
  python_action:
    use_jython: false
    script: "import os\r\nimport re\r\nimport shutil\r\nfrom pathlib import Path\r\n\r\nFILE_EXTENSION = '.sl'\r\nGIT_META_FOLDER = '.git'\r\nLIBRARY_FOLDER = 'Library'\r\nPROPERTY_FOLDER = 'Configuration' + os.path.sep + 'System Properties'\r\n\r\n# todo\r\n#  - optimize by using re.compile\r\n#  - do not touch the file if there is no match\r\n#  - allow to rename into an empty namespace (not sure)\r\n#  - support imports (import a flow from another namespace)\r\n\r\n# changes all references of the flow (using old_folder_name) to the flow (using the new_folder_name)\r\ndef _move_flow_references(file_content, old_namespace, new_namespace):\r\n    regex_search = '(^[ \\t]+do:\\n^[ \\t]+)(' + old_namespace + ')(\\\\.)'\r\n    regex_replace = '\\\\1' + new_namespace + '\\\\3'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\n# changes the namespace\r\ndef _rename_namespace(file_content, old_namespace, new_namespace):\r\n    regex_search = '(^namespace[ \\t]*:[ \\t]*)(' + _enclose_empty(old_namespace) + ')([ \\t]*$|\\\\.)'\r\n    regex_replace = '\\\\1' + _enclose_empty(new_namespace) + '\\\\3'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\n# rename all references\r\ndef _rename_flow_references(file_content, old_flow_name, new_flow_name):\r\n    # todo - rename also the names of boxes (and references to them)\r\n    regex_search = '(^[ \\t]+do[ \\t]*:\\n^[ \\t]+)(' + old_flow_name + ')([ \\t]*:)'\r\n    regex_replace = '\\\\1' + new_flow_name + '\\\\3'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\n# rename the flow (or operation)\r\ndef _rename_flow(file_content, old_flow_name, new_flow_name):\r\n    regex_search = '(^(operation|flow)[ \\t]*:[ \\t]*\\n^[ \\t]+name[ \\t]*:[ \\t]*)(' + old_flow_name + ')([ \\t]*$)'\r\n    regex_replace = '\\\\1' + new_flow_name + '\\\\4'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\n# retrieves all properties from the property file\r\ndef _get_all_properties(file_content):\r\n    regex_search = '(^[ \\t]+-[ \\t]+)(\\\\w+)([ \\t]*:)'\r\n    return [x[1] for x in re.findall(regex_search, file_content, flags=re.MULTILINE)]\r\n\r\n\r\ndef _rename_property_references(file_content, old_property_name, new_property_name):\r\n    regex_search = '(get_sp[ \\t]*\\\\([ \\t]*[\\'\\\"])(' + old_property_name + ')([\\'\\\"][ \\t]*\\\\))'\r\n    regex_replace = '\\\\1' + new_property_name + '\\\\3'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\ndef _rename_property(file_content, old_property_name, new_property_name):\r\n    regex_search = '(^[ \\t]+-[ \\t]+)(' + old_property_name + ')([ \\t]*:)'\r\n    regex_replace = '\\\\1' + new_property_name + '\\\\3'\r\n    new_file_content = re.sub(regex_search, regex_replace, file_content, flags=re.MULTILINE)\r\n    return new_file_content\r\n\r\n\r\ndef _move_file(project_folder, old_path, new_path):\r\n    try:\r\n        shutil.move(old_path, new_path)\r\n    except FileNotFoundError:\r\n        # may happen when refactoring multiple projects; the old_path may not exist in one of the projects\r\n        pass\r\n\r\n\r\ndef _move_files(project_folder, old_path, new_path):\r\n    try:\r\n        files = os.listdir(old_path)\r\n    except FileNotFoundError:\r\n        # may happen when refactoring multiple projects; the old_path may not exist in one of the projects\r\n        return\r\n    for file in files:\r\n        _move_file(project_folder, os.path.join(old_path, file), new_path)\r\n\r\n\r\ndef _remove_folder_tree_if_empty(folder):\r\n    for root, dirs, files in os.walk(folder, topdown=False):    #remove from bottom up\r\n        for dir in dirs:\r\n            try:\r\n                dir_path = os.path.join(root, dir)\r\n                os.rmdir(dir_path)\r\n            except OSError:\r\n                pass\r\n    try:                                                        # remove the root folder\r\n        os.rmdir(folder)\r\n    except OSError:\r\n        pass\r\n\r\n\r\n# Replaces the content of the file with new content\r\n# modify_content - function modifying the content\r\n# old_value - value to be found\r\n# new_value - value to be replaced with\r\n# return_value - optional; if given, it returns values of the original file\r\ndef _modify_file(file_path, modify_content, old_value, new_value, return_value=None):\r\n    try:\r\n        with open(file_path, 'r+') as f:\r\n            file_content = f.read()\r\n            value = None if return_value is None else return_value(file_content)\r\n            new_file_content = modify_content(file_content, old_value, new_value)\r\n            f.seek(0)\r\n            f.write(new_file_content)\r\n            f.truncate()\r\n            f.flush()\r\n            f.close()\r\n        return value\r\n    except FileNotFoundError:\r\n        # may happen when refactoring multiple projects; the file_path may not exist in one of the projects\r\n        return []\r\n\r\n\r\n# Replaces the content of files in the folder\r\ndef _modify_files(folder_root, modify_content, old_value, new_value):\r\n    for root, dirs, files in os.walk(folder_root):\r\n        for file in files:\r\n            if file.endswith(FILE_EXTENSION):\r\n                _modify_file(os.path.join(root, file), modify_content, old_value, new_value)\r\n\r\n\r\n# Removes namespace\r\ndef _get_short_name(long_name):\r\n    return long_name.split('.')[-1]\r\n\r\n\r\n# Joins namespace and short_name; if no namespace (or empty), it returns just the short_name\r\ndef _get_long_name(namespace, short_name):\r\n    return short_name if namespace == '' else namespace + '.' + short_name\r\n\r\ndef _get_namespace(long_name):\r\n    return long_name.rsplit('.', 1)[0]\r\n\r\ndef _get_path(namespace):\r\n    return namespace.replace('.', os.path.sep)\r\n\r\n# Replaces an empty string with ''\r\ndef _enclose_empty(namespace):\r\n    return \"''\" if namespace == '' else namespace\r\n\r\n# to rename a folder:\r\n# - iterate all project files\r\n#   - call move folder in all subflow\r\n# - iterate all files under the folder being changed\r\n#   - call rename namespace\r\n# - move the folder to a new folder\r\ndef move_flows(project_folders, old_namespace, new_namespace):\r\n    for project_folder in project_folders:\r\n#        print (\"Moving flows from %s into %s\" % (_enclose_empty(old_namespace), _enclose_empty(new_namespace)))\r\n        assert old_namespace != '' and new_namespace != '', 'Namespace must not be empty!'\r\n        project_folder_full = os.path.join(project_folder, LIBRARY_FOLDER)\r\n        _modify_files(project_folder_full, _move_flow_references, old_namespace, new_namespace)\r\n\r\n        old_folder = os.path.join(project_folder_full, _get_path(old_namespace))\r\n        _modify_files(old_folder, _rename_namespace, old_namespace, new_namespace)\r\n\r\n        if new_namespace == '':\r\n            new_folder = project_folder_full\r\n        else:\r\n            new_folder = os.path.join(project_folder_full, _get_path(new_namespace))\r\n        os.makedirs(new_folder, exist_ok=True)\r\n        _move_files(project_folder, old_folder, new_folder)\r\n        _remove_folder_tree_if_empty(\r\n            os.path.join(project_folder_full, old_namespace.split('.')[0]))  # remove the top folder of the old namespace\r\n\r\n\r\n# to rename a flow:\r\n# - iterate all files in project\r\n#   - call rename flow\r\n# - rename the flow inside of the file\r\n# - rename the file\r\ndef move_flow(project_folders, old_flow_name, new_flow_name):\r\n    for project_folder in project_folders:\r\n#        print (\"Moving flow %s into %s\" % (old_flow_name, new_flow_name))\r\n        old_namespace = _get_namespace(old_flow_name)\r\n        new_namespace = _get_namespace(new_flow_name)\r\n        assert old_namespace != '' and new_namespace != '', 'Namespace must not be empty!'\r\n        project_folder_full = os.path.join(project_folder, LIBRARY_FOLDER)\r\n        _modify_files(project_folder_full, _rename_flow_references, old_flow_name, new_flow_name)\r\n\r\n        old_flow = os.path.join(project_folder_full, _get_path(old_flow_name)) + FILE_EXTENSION\r\n        if old_namespace != new_namespace:      # moving to another folder\r\n            _modify_file(old_flow, _rename_namespace, old_namespace, new_namespace)\r\n\r\n        old_short_name = _get_short_name(old_flow_name)\r\n        new_short_name = _get_short_name(new_flow_name)\r\n        if old_short_name != new_short_name:    # renaming to another file\r\n            _modify_file(old_flow, _rename_flow, old_short_name, new_short_name)\r\n\r\n        new_flow = os.path.join(project_folder_full, _get_path(new_flow_name)) + FILE_EXTENSION\r\n        if old_namespace != new_namespace:      # moving to another folder\r\n            os.makedirs(Path(new_flow).parent, exist_ok=True)\r\n        _move_file(project_folder, old_flow, new_flow)\r\n        if old_namespace != new_namespace:      # moving to another folder\r\n            _remove_folder_tree_if_empty(os.path.join(project_folder_full, _get_path(old_namespace)))\r\n\r\n\r\n# to move system property to another namespace\r\n# - find all references (under LIBRARY_FOLDER) and rename them\r\n# - move the system property file to a new folder (under PROPERTY_FOLDER)\r\ndef move_property_file(project_folders, property_file_name, old_namespace, new_namespace):\r\n    for project_folder in project_folders:\r\n#        print (\"Moving property file %s from namespace %s into %s\" % (property_file_name, _enclose_empty(old_namespace), _enclose_empty(new_namespace)))\r\n        property_file = os.path.join(project_folder, PROPERTY_FOLDER, _get_path(old_namespace), property_file_name)\r\n        property_names = _modify_file(property_file, _rename_namespace, old_namespace, new_namespace, _get_all_properties)\r\n\r\n        for property_name in property_names:        #todo optimize -> do it in reverse order, first iterate files and per each file, iterate properties\r\n            old_property_name_long = _get_long_name(old_namespace, property_name)\r\n            new_property_name_long = _get_long_name(new_namespace, property_name)\r\n            _modify_files(os.path.join(project_folder, LIBRARY_FOLDER), _rename_property_references, old_property_name_long,\r\n                          new_property_name_long)\r\n\r\n        if new_namespace == '':\r\n            new_namespace_folder = os.path.join(project_folder, PROPERTY_FOLDER)\r\n        else:\r\n            new_namespace_folder = os.path.join(project_folder, PROPERTY_FOLDER, _get_path(new_namespace))\r\n        os.makedirs(new_namespace_folder, exist_ok=True)\r\n        _move_file(project_folder, property_file, new_namespace_folder)\r\n        _remove_folder_tree_if_empty(os.path.join(project_folder, PROPERTY_FOLDER, old_namespace.split('.')[0]))\r\n\r\n\r\n# to rename a system property\r\n# - find all references (under LIBRARY_FOLDER) and rename them\r\n# - rename the property\r\ndef rename_property(project_folders, property_file_name, namespace, old_property_name, new_property_name):\r\n    for project_folder in project_folders:\r\n#        print (\"Renaming property %s from namespace %s (file %s) into %s\" % (old_property_name, _enclose_empty(namespace), property_file_name, new_property_name))\r\n        project_folder_full = os.path.join(project_folder, LIBRARY_FOLDER)\r\n        old_property_name_long = _get_long_name(namespace, old_property_name)\r\n        new_property_name_long = _get_long_name(namespace, new_property_name)\r\n        _modify_files(project_folder_full, _rename_property_references, old_property_name_long, new_property_name_long)\r\n\r\n        property_file = os.path.join(project_folder, PROPERTY_FOLDER, _get_path(namespace), property_file_name)\r\n        _modify_file(property_file, _rename_property, old_property_name, new_property_name)\r\n\r\ndef _sub_folders(project_folders):\r\n    pf = []\r\n    for folder in project_folders:\r\n        pf = pf + [os.path.join(folder, x) for x in os.listdir(folder)]\r\n    return pf\r\n\r\n\r\ndef execute(action, project_folders, old_name, new_name, property_file_name, namespace):\r\n    try:\r\n        failure = ''\r\n        project_folders = _sub_folders(eval(project_folders))\r\n        if action == 'MOVE_FLOWS':\r\n            move_flows(project_folders, old_name, new_name)\r\n        elif action == 'MOVE_FLOW':\r\n            move_flow(project_folders, old_name, new_name)\r\n        elif action == 'MOVE_PROPERTY_FILE':\r\n            move_property_file(project_folders, property_file_name, old_name, new_name)\r\n        elif action == 'RENAME_PROPERTY':\r\n            rename_property(project_folders, property_file_name, namespace, old_name, new_name)\r\n        else:\r\n            failure = 'unknown action: '+action\r\n    except Exception as e:\r\n        failure = \"%s: %s\" % (type(e).__name__, str(e))\r\n    return { 'failure' : failure }"
  outputs:
    - failure
  results:
    - SUCCESS: '${len(failure) == 0}'
    - FAILURE
